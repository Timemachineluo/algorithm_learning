#dfs爆搜+记忆化搜索
问题描述
　　在一条街上有n个卖菜的商店，按1至n的顺序排成一排，这些商店都卖一种蔬菜。
　　第一天，每个商店都自己定了一个正整数的价格。店主们希望自己的菜价和其他商店的一致，第二天，每一家商店都会根据他自己和相邻商店的价格调整自己的价格。具体的，每家商店都会将第二天的菜价设置为自己和相邻商店第一天菜价的平均值（用去尾法取整）。
　　注意，编号为1的商店只有一个相邻的商店2，编号为n的商店只有一个相邻的商店n-1，其他编号为i的商店有两个相邻的商店i-1和i+1。
　　给定第二天各个商店的菜价，可能存在不同的符合要求的第一天的菜价，请找到符合要求的第一天菜价中字典序最小的一种。
　　字典序大小的定义：对于两个不同的价格序列(a1, a2, ..., an)和(b1, b2, b3, ..., bn)，若存在i (i>=1), 使得ai<bi，且对于所有j<i，aj=bj，则认为第一个序列的字典序小于第二个序列。
输入格式
　　输入的第一行包含一个整数n，表示商店的数量。
　　第二行包含n个正整数，依次表示每个商店第二天的菜价。
输出格式
　　输出一行，包含n个正整数，依次表示每个商店第一天的菜价。
样例输入
8
2 2 1 3 4 9 10 13
样例输出
2 2 2 1 6 5 16 10
数据规模和约定
　　对于30%的评测用例，2<=n<=5，第二天每个商店的菜价为不超过10的正整数；
　　对于60%的评测用例，2<=n<=20，第二天每个商店的菜价为不超过100的正整数；
　　对于所有评测用例，2<=n<=300，第二天每个商店的菜价为不超过100的正整数。
　　请注意，以上都是给的第二天菜价的范围，第一天菜价可能会超过此范围。
#include<iostream>
#include<cstdlib>
using namespace std;
int t,count;
int a[400],b[400];//输入菜价，所求菜价 
bool f[301][301][301]; //储存状态信息，也就是dfs的n,x,y 
void dfs(int n,int x,int y)//分别是搜到第n天，b[n-1]（求到了第n-1天的菜价）,b[n]（求到了第n天的菜价）
{ 
	if(f[n][x][y])return;//剪枝，不加只有80分 
	f[n][x][y]=1;
	if(n==t-1) //最后一天菜价特殊处理，所以n只用等于t-1就够了 
	{
		if((3*a[n]-x)/2==a[t]||(3*a[n]-x+1)/2==a[t]||(3*a[n]-x+2)/2==a[t]) //最后一天菜价 
		{
			//cout<<count<<endl;
			for(int i=1;i<=n;++i)    //输出 
			cout<<b[i]<<" ";
			for(int i=0;i<3;++i)
			{
				if((3*a[n]-x+i)/2==a[t]) //输出最后一天菜价
				{
					cout<<3*a[n]-x-y+i;
					exit(0);  //直接结束程序，这样用时更短 
				}
			}
		}
		return;
	}
	for(int i=0;i<3;++i) 
	{
		b[n+1]=3*a[n]-x-y+i; //递推关系式 
		if(b[n+1]>=1)
		dfs(n+1,y,b[n+1]);
	}
}
int main()
{
	cin>>t;
	for(int i=1;i<=t;++i)
	cin>>a[i];
	for(int i=1;i<=2*a[1];++i)
	{
		b[1]=i,b[2]=2*a[1]-i;  //第一天菜价，有两种可能 
		dfs(2,i,b[2]);
		b[1]=i,b[2]=2*a[1]-i+1; //第二种可能 
		dfs(2,i,b[2]);
	} 
	return 0;
}
/*
290
8 8 7 11 12 11 22 23 23 8 8 5 5 5 5 5 5 5 6 7 7 7 6 5 5 5 5 5 5 5 5 5 5 5 5 5 5 
5 6 7 8 8 7 5 5 5 8 25 31 31 15 8 28 28 48 25 25 5 6 7 8 8 7 5 5 5 5 5 5 5 5 5 5 5 5 5 
5 5 6 7 8 8 6 5 5 5 5 5 5 5 21 21 21 5 5 5 5 5 27 28 29 7 6 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 7 8 8 7 5 5 5 5 5 
5 5 5 5 5 5 5 5 5 5 6 7 8 8 7 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 8 8 7 11 12 11 22 23 23 8
8 8 7 11 12 11 22 23 23 8 8 8 7 11 12 11 22 23 23 8 8 8 7 11 12 11 22 23 23 8
8 8 7 11 12 11 22 23 23 8 8 8 7 11 12 11 22 23 23 8 8 8 7 11 12 11 22 23 23 8
8 8 7 11 12 11 22 23 23 8 8 8 7 11 12 11 22 23 23 8 8 8 7 11 12 11 22 23 23 8
8 8 7 11 12 11 22 23 23 8 8 8 7 11 12 11 22 23 23 8 8 8 7 11 12 11 22 23 23 8
*/
